# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Main.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import matplotlib.pyplot as plt
from scipy.signal import peak_prominences, peak_widths, find_peaks
import numpy as np
import time
import Procedure 
from Util import get_peaks, _val_check
import os
from threading import Thread
import ahocorasick
from Bio import SeqIO
import traceback

# MatPlotLib Class to set up canvas figure
class MplCanvas(FigureCanvas):
    def __init__(self, parent=None, width=5, height=4, dpi=110):
        fig = plt.Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)
        super(MplCanvas, self).__init__(fig)

if getattr(sys, 'frozen', False):
    basedir = sys._MEIPASS  # PyInstaller temp dir
else:
    basedir = os.path.dirname(__file__)

class _WorkerSignals(QtCore.QObject):
    done = QtCore.pyqtSignal(dict)
    def __init__(self, parent=None):
        super().__init__(parent)

class Ui_mainWindow(QtCore.QObject):
    total_input_reads = 0
    total_input_reads = 0
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self._signals = _WorkerSignals()

    @QtCore.pyqtSlot(dict)
    def _onResultsReady(self, results):
        print(">> _onResultsReady triggered")
        self.results = results
        self.loadData(self.results)
        self.tableLabel.setText(f"Derived ncRNAs: {self.exportedResultsSeq}")
        self.tableLabel.setVisible(True)
        self.stackedWidget.setCurrentIndex(2)

    # static variables to hold seq and db file paths
    seqFile = ""
    dbFile = ""
    tempSeparatedFile = ""
    exportedResultsSeq = ""
    exportedResultsDB = ""
    results = {}
    completed = 0
    uidAccessDict = {}

    # GUI component declarations and attach to functions 
    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.setEnabled(True)
        mainWindow.resize(800, 600)
        mainWindow.setMinimumSize(QtCore.QSize(800, 600))
        mainWindow.setMaximumSize(QtCore.QSize(800, 600))
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(10, 10, 761, 521))
        self.stackedWidget.setMinimumSize(QtCore.QSize(761, 521))
        self.stackedWidget.setMaximumSize(QtCore.QSize(1000, 1000))
        self.stackedWidget.setObjectName("stackedWidget")
        self.seqUploadPage = QtWidgets.QWidget()
        self.seqUploadPage.setMinimumSize(QtCore.QSize(761, 521))
        self.seqUploadPage.setMaximumSize(QtCore.QSize(761, 521))
        self.seqUploadPage.setObjectName("seqUploadPage")
        self.uploadLabel = QtWidgets.QLabel(self.seqUploadPage)
        self.uploadLabel.setGeometry(QtCore.QRect(200, 50, 350, 19))
        self.uploadLabel.setMinimumSize(QtCore.QSize(350, 19))
        self.uploadLabel.setMaximumSize(QtCore.QSize(350, 19))
        self.uploadLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.uploadLabel.setObjectName("uploadLabel")
        self.browseLabel = QtWidgets.QLabel(self.seqUploadPage)
        self.browseLabel.setGeometry(QtCore.QRect(200, 80, 350, 19))
        self.browseLabel.setMinimumSize(QtCore.QSize(350, 19))
        self.browseLabel.setMaximumSize(QtCore.QSize(350, 19))
        self.browseLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.browseLabel.setObjectName("browseLabel")
        self.uploadSeq = QtWidgets.QPushButton(self.seqUploadPage)
        self.uploadSeq.setGeometry(QtCore.QRect(200, 100, 350, 121))
        self.uploadSeq.setMinimumSize(QtCore.QSize(350, 121))
        self.uploadSeq.setMaximumSize(QtCore.QSize(350, 121))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.uploadSeq.setFont(font)
        self.uploadSeq.setObjectName("uploadSeq")
        self.uploadSeq.clicked.connect(self.uploadSeqClicked)

        self.formatLabel = QtWidgets.QLabel(self.seqUploadPage)
        self.formatLabel.setGeometry(QtCore.QRect(200, 230, 350, 19))
        self.formatLabel.setMinimumSize(QtCore.QSize(350, 19))
        self.formatLabel.setMaximumSize(QtCore.QSize(350, 19))
        self.formatLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.formatLabel.setObjectName("formatLabel")
        self.continueButton = QtWidgets.QPushButton(self.seqUploadPage)
        self.continueButton.setGeometry(QtCore.QRect(200, 320, 350, 23))
        self.continueButton.setMinimumSize(QtCore.QSize(350, 23))
        self.continueButton.setMaximumSize(QtCore.QSize(350, 23))
        self.continueButton.setObjectName("continueButton")
        self.continueButton.clicked.connect(self.continueButtonClicked)

        self.datasetFileNameLabel = QtWidgets.QLabel(self.seqUploadPage)
        self.datasetFileNameLabel.setGeometry(QtCore.QRect(150, 260, 451, 19))
        self.datasetFileNameLabel.setMinimumSize(QtCore.QSize(350, 19))
        self.datasetFileNameLabel.setMaximumSize(QtCore.QSize(451, 19))
        self.datasetFileNameLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.datasetFileNameLabel.setObjectName("datasetFileNameLabel")
        self.datasetFileNameLabel.setVisible(False)

        self.stackedWidget.addWidget(self.seqUploadPage)
        self.databaseUploadPage = QtWidgets.QWidget()
        self.databaseUploadPage.setMinimumSize(QtCore.QSize(761, 521))
        self.databaseUploadPage.setMaximumSize(QtCore.QSize(761, 521))
        self.databaseUploadPage.setObjectName("databaseUploadPage")
        self.uploadLabel_2 = QtWidgets.QLabel(self.databaseUploadPage)
        self.uploadLabel_2.setGeometry(QtCore.QRect(200, 50, 350, 19))
        self.uploadLabel_2.setMinimumSize(QtCore.QSize(350, 19))
        self.uploadLabel_2.setMaximumSize(QtCore.QSize(350, 19))
        self.uploadLabel_2.setAlignment(QtCore.Qt.AlignCenter)
        self.uploadLabel_2.setObjectName("uploadLabel_2")
        self.browseLabel2 = QtWidgets.QLabel(self.databaseUploadPage)
        self.browseLabel2.setGeometry(QtCore.QRect(200, 80, 350, 19))
        self.browseLabel2.setMinimumSize(QtCore.QSize(350, 19))
        self.browseLabel2.setMaximumSize(QtCore.QSize(350, 19))
        self.browseLabel2.setAlignment(QtCore.Qt.AlignCenter)
        self.browseLabel2.setObjectName("browseLabel2")
        self.uploadDatabase = QtWidgets.QPushButton(self.databaseUploadPage)
        self.uploadDatabase.setGeometry(QtCore.QRect(200, 100, 350, 121))
        self.uploadDatabase.setMinimumSize(QtCore.QSize(350, 121))
        self.uploadDatabase.setMaximumSize(QtCore.QSize(350, 121))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.uploadDatabase.setFont(font)
        self.uploadDatabase.setObjectName("uploadDatabase")
        self.uploadDatabase.clicked.connect(self.uploadDBClicked)

        self.formatLabel2 = QtWidgets.QLabel(self.databaseUploadPage)
        self.formatLabel2.setGeometry(QtCore.QRect(200, 230, 350, 19))
        self.formatLabel2.setMinimumSize(QtCore.QSize(350, 19))
        self.formatLabel2.setMaximumSize(QtCore.QSize(350, 19))
        self.formatLabel2.setAlignment(QtCore.Qt.AlignCenter)
        self.formatLabel2.setObjectName("formatLabel2")

        self.databaseFileNameLabel = QtWidgets.QLabel(self.databaseUploadPage)
        self.databaseFileNameLabel.setGeometry(QtCore.QRect(150, 260, 451, 19))
        self.databaseFileNameLabel.setMinimumSize(QtCore.QSize(451, 19))
        self.databaseFileNameLabel.setMaximumSize(QtCore.QSize(451, 19))
        self.databaseFileNameLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.databaseFileNameLabel.setObjectName("databaseFileNameLabel")
        self.databaseFileNameLabel.setVisible(False)

        self.processButton = QtWidgets.QPushButton(self.databaseUploadPage)
        self.processButton.setGeometry(QtCore.QRect(200, 360, 350, 23))
        self.processButton.setMinimumSize(QtCore.QSize(350, 23))
        self.processButton.setMaximumSize(QtCore.QSize(350, 23))
        self.processButton.setObjectName("processButton")
        self.processButton.setVisible(False)
        self.processButton.clicked.connect(self.processThread)

        self.timerLabel = QtWidgets.QLabel(self.databaseUploadPage)
        self.timerLabel.setGeometry(QtCore.QRect(200, 410, 351, 20))
        self.timerLabel.setText("")
        self.timerLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.timerLabel.setObjectName("timerLabel")

        self.preprocessFilesButton = QtWidgets.QPushButton(self.databaseUploadPage)
        self.preprocessFilesButton.setGeometry(QtCore.QRect(200, 290, 350, 23))
        self.preprocessFilesButton.setMinimumSize(QtCore.QSize(350, 23))
        self.preprocessFilesButton.setMaximumSize(QtCore.QSize(350, 23))
        self.preprocessFilesButton.setObjectName("preprocessFilesButton")
        self.preprocessFilesButton.clicked.connect(self.preProcessThread)

        self.preprocessCompleteLabel = QtWidgets.QLabel(self.databaseUploadPage)
        self.preprocessCompleteLabel.setGeometry(QtCore.QRect(200, 310, 351, 20))
        self.preprocessCompleteLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.preprocessCompleteLabel.setObjectName("preprocessCompleteLabel")
        self.preprocessCompleteLabel.setVisible(False)

        self.stackedWidget.addWidget(self.databaseUploadPage)
        self.resultsPage = QtWidgets.QWidget()
        self.resultsPage.setMinimumSize(QtCore.QSize(761, 521))
        self.resultsPage.setMaximumSize(QtCore.QSize(761, 521))
        self.resultsPage.setObjectName("resultsPage")
        self.resultsTable = QtWidgets.QTableWidget(self.resultsPage)
        self.resultsTable.setGeometry(QtCore.QRect(110, 100, 560, 350))
        self.resultsTable.setMinimumSize(QtCore.QSize(560, 191))
        self.resultsTable.setMaximumSize(QtCore.QSize(10000, 10000))
        self.resultsTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContentsOnFirstShow)
        self.resultsTable.setDragEnabled(True)
        self.resultsTable.setObjectName("resultsTable")
        self.resultsTable.setColumnCount(2)
        self.resultsTable.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(8)
        item.setFont(font)
        self.resultsTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(8)
        item.setFont(font)
        self.resultsTable.setHorizontalHeaderItem(1, item)
        self.resultsTable.horizontalHeader().setCascadingSectionResizes(True)
        self.resultsTable.horizontalHeader().setDefaultSectionSize(280)
        self.resultsTable.horizontalHeader().setMinimumSectionSize(140)
        self.resultsTable.horizontalHeader().setSortIndicatorShown(True)
        self.resultsTable.horizontalHeader().setStretchLastSection(False)
        self.resultsTable.verticalHeader().setStretchLastSection(False)

        self.tableLabel = QtWidgets.QLabel(self.resultsPage)
        self.tableLabel.setGeometry(QtCore.QRect(210, 40, 350, 19))
        self.tableLabel.setMinimumSize(QtCore.QSize(350, 19))
        self.tableLabel.setMaximumSize(QtCore.QSize(561, 20))
        self.tableLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.tableLabel.setObjectName("tableLabel")
        self.tableLabel.setVisible(False)

        self.geneSearchBox = QtWidgets.QLineEdit(self.resultsPage)
        self.geneSearchBox.setGeometry(QtCore.QRect(220, 70, 291, 23))
        self.geneSearchBox.setMinimumSize(QtCore.QSize(200, 23))
        self.geneSearchBox.setMaximumSize(QtCore.QSize(10000, 23))
        self.geneSearchBox.setText("")
        self.geneSearchBox.setObjectName("geneSearchBox")
        self.searchLabel = QtWidgets.QLabel(self.resultsPage)
        self.searchLabel.setGeometry(QtCore.QRect(110, 70, 105, 23))
        self.searchLabel.setMinimumSize(QtCore.QSize(105, 23))
        self.searchLabel.setMaximumSize(QtCore.QSize(1000, 1000))
        self.searchLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.searchLabel.setObjectName("searchLabel")
        self.plotButton = QtWidgets.QPushButton(self.resultsPage)
        self.plotButton.setGeometry(QtCore.QRect(520, 70, 151, 23))
        self.plotButton.setObjectName("plotButton")
        self.plotButton.clicked.connect(self.plotButtonClicked)

        self.stackedWidget.addWidget(self.resultsPage)
        self.plotPage = QtWidgets.QWidget()
        self.plotPage.setObjectName("plotPage")
        self.exitPlotPage = QtWidgets.QPushButton(self.plotPage)
        self.exitPlotPage.setGeometry(QtCore.QRect(20, 40, 111, 23))
        self.exitPlotPage.setObjectName("exitPlotPage")
        self.exitPlotPage.clicked.connect(self.exitPlotPageClicked)

        self.xAxisLabel = QtWidgets.QLabel(self.plotPage)
        self.xAxisLabel.setGeometry(QtCore.QRect(350, 450, 140, 31))
        self.xAxisLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.xAxisLabel.setObjectName("xAxisLabel")
        self.yAxisLabel = QtWidgets.QLabel(self.plotPage)
        self.yAxisLabel.setGeometry(QtCore.QRect(20, 220, 71, 31))
        self.yAxisLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.yAxisLabel.setObjectName("yAxisLabel")
        self.uidLabel = QtWidgets.QLabel(self.plotPage)
        self.uidLabel.setGeometry(QtCore.QRect(106, 20, 621, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.uidLabel.setFont(font)
        self.uidLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.uidLabel.setObjectName("uidLabel")


        self.gridLayoutWidget = QtWidgets.QWidget(self.plotPage)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(110, 70, 611, 381))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.plotWidget = QtWidgets.QWidget(self.gridLayoutWidget)
        self.plotWidget.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.plotWidget.setObjectName("plotWidget")
        self.gridLayout.addWidget(self.plotWidget, 0, 0, 1, 1)
        self.stackedWidget.addWidget(self.plotPage)
        self.toDatasetUpload = QtWidgets.QPushButton(self.centralwidget)
        self.toDatasetUpload.setGeometry(QtCore.QRect(40, 500, 233, 23))
        self.toDatasetUpload.setMinimumSize(QtCore.QSize(0, 0))
        self.toDatasetUpload.setMaximumSize(QtCore.QSize(1000, 1000))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.toDatasetUpload.setFont(font)
        self.toDatasetUpload.setObjectName("toDatasetUpload")
        self.toDatasetUpload.clicked.connect(self.toSeqClicked)

        self.toDatabaseUpload = QtWidgets.QPushButton(self.centralwidget)
        self.toDatabaseUpload.setGeometry(QtCore.QRect(280, 500, 233, 23))
        self.toDatabaseUpload.setMinimumSize(QtCore.QSize(180, 23))
        self.toDatabaseUpload.setMaximumSize(QtCore.QSize(1000, 1000))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.toDatabaseUpload.setFont(font)
        self.toDatabaseUpload.setObjectName("toDatabaseUpload")
        self.toDatabaseUpload.clicked.connect(self.toDBClicked)
        self.exportPlotsButton = QtWidgets.QPushButton(self.centralwidget)
        self.exportPlotsButton.setGeometry(QtCore.QRect(280, 550, 233, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.exportPlotsButton.setFont(font)
        self.exportPlotsButton.setObjectName("exportPlotsButton")
        self.exportPlotsButton.setText("Export Plots")
        self.exportPlotsButton.clicked.connect(self.exportAllPlots)


        self.loadingLabel = QtWidgets.QLabel(self.databaseUploadPage)
        self.loadingLabel.setGeometry(QtCore.QRect(330, 410, 91, 61))
        self.loadingLabel.setText("")
        self.loadingLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.loadingLabel.setObjectName(os.path.join(basedir, "loadingLabel"))
        self.loadingLabel.setVisible(False)

        self.toResults = QtWidgets.QPushButton(self.centralwidget)
        self.toResults.setGeometry(QtCore.QRect(520, 500, 233, 23))
        self.toResults.setMinimumSize(QtCore.QSize(180, 23))
        self.toResults.setMaximumSize(QtCore.QSize(1000, 1000))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.toResults.setFont(font)
        self.toResults.setObjectName("toResults")
        self.toResults.clicked.connect(self.toResultsClicked)

        mainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(mainWindow)
        self.statusbar.setObjectName("statusbar")
        mainWindow.setStatusBar(self.statusbar)

        self.movie = QtGui.QMovie(os.path.join(basedir, "loading.gif"))
        self.loadingLabel.setMovie(self.movie)
        self.movie.start()

        self.completionTimeLabel = QtWidgets.QLabel(self.resultsPage)
        self.completionTimeLabel.setGeometry(QtCore.QRect(110, 20, 561, 20))
        self.completionTimeLabel.setText("")
        self.completionTimeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.completionTimeLabel.setObjectName("completionTimeLabel")

        self.retranslateUi(mainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

    
    # Styling function
    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "FragmentFinder"))
        self.uploadLabel.setText(_translate("mainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Please Upload RNA Seq Dataset Below</span></p></body></html>"))
        self.browseLabel.setText(_translate("mainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">Click to Browse</span></p></body></html>"))
        self.uploadSeq.setText(_translate("mainWindow", "Upload File"))
        self.formatLabel.setText(_translate("mainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">FASTA or FASTQ Format Accepted</span></p></body></html>"))
        self.continueButton.setText(_translate("mainWindow", "Continue"))
        self.datasetFileNameLabel.setText(_translate("mainWindow", "TextLabel"))
        self.uploadLabel_2.setText(_translate("mainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Please Upload Database File</span></p></body></html>"))
        self.browseLabel2.setText(_translate("mainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">Click to Browse</span></p></body></html>"))
        self.uploadDatabase.setText(_translate("mainWindow", "Upload File"))
        self.formatLabel2.setText(_translate("mainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">FASTA Format Accepted</p></body></html>"))
        self.databaseFileNameLabel.setText(_translate("mainWindow", "TextLabel"))
        self.processButton.setText(_translate("mainWindow", "Let\'s Go!"))
        self.preprocessFilesButton.setText(_translate("mainWindow", "Preprocess Files"))
        self.preprocessCompleteLabel.setText(_translate("mainWindow", "Preprocessing Complete!"))
        item = self.resultsTable.horizontalHeaderItem(0)
        item.setText(_translate("mainWindow", "Gene ID"))
        item = self.resultsTable.horizontalHeaderItem(1)
        item.setText(_translate("mainWindow", "Expression Vector"))
        self.tableLabel.setText(_translate("mainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Derived ncRNAs</span></p></body></html>"))
        self.searchLabel.setText(_translate("mainWindow", "Search Gene ID"))
        self.plotButton.setText(_translate("mainWindow", "Plot Selected ncRNA"))
        self.exitPlotPage.setText(_translate("mainWindow", "Back"))
        self.xAxisLabel.setText(_translate("mainWindow", "Position on ncRNA"))
        self.yAxisLabel.setText(_translate("mainWindow", "Expression"))
        self.uidLabel.setText(_translate("mainWindow", "UID"))
        self.toDatasetUpload.setText(_translate("mainWindow", "RNA Seq Dataset Selector"))
        self.toDatabaseUpload.setText(_translate("mainWindow", "Database Selector"))
        self.toResults.setText(_translate("mainWindow", "Results"))

    # START FUNCTIONS THAT GIVE ACTION TO GUI

    # Navigate to results page
    def toResultsClicked(self):
        self.stackedWidget.setCurrentIndex(2)

    # Navigate to db upload page
    def toDBClicked(self):
        self.databaseFileNameLabel.setVisible(False)
        self.preprocessCompleteLabel.setVisible(False)
        self.processButton.setVisible(False)
        self.loadingLabel.setVisible(False)
        self.stackedWidget.setCurrentIndex(1)

    # Navigate to seq file upload page
    def toSeqClicked(self):
        self.datasetFileNameLabel.setVisible(False)
        self.stackedWidget.setCurrentIndex(0)

    # Upload seq file
    def uploadSeqClicked(self):
        self.seqFile = ""
        # Open file dialog
        fname = QtWidgets.QFileDialog.getOpenFileName(
            None,
            "Open File",
            "",
            "Text Files (*.txt);;FASTA Files (*.fasta *.fa *.fasta.gz *.fa.gz);;FASTQ Files (*.fastq *.fq *.fastq.gz *.fq.gz)"
        )
        # Output file name to screen and assign static seqFile var
        if fname:
            self.datasetFileNameLabel.setText(fname[0])
            self.datasetFileNameLabel.setVisible(True)
            self.seqFile = str(fname[0])
            tempExpFpath = os.path.basename(fname[0])
            tempExpFname = os.path.splitext(tempExpFpath)
            self.exportedResultsSeq = tempExpFname[0]

    # Continue from seq file page
    def continueButtonClicked(self):
        self.stackedWidget.setCurrentIndex(1)

    # Continue from db file page
    def uploadDBClicked(self):
        self.dbFile = ""
        # Open file dialog
        fname = QtWidgets.QFileDialog.getOpenFileName(None, "Open File", "", "Text Files (*.txt);; FASTA Files (*.fasta)")
        # Output file name to screen and assign static dbFile variable
        if fname:
            self.databaseFileNameLabel.setText(fname[0])
            self.databaseFileNameLabel.setVisible(True)
            self.dbFile = str(fname[0])
            tempExpPath = os.path.basename(fname[0])
            tempExpFname = os.path.splitext(tempExpPath)
            self.exportedResultsDB = tempExpFname[0]

    # Load data into results table
    def loadData(self, dict):
        x = 0
        y = 0
        for val in dict:
            y += 1

        self.resultsTable.setRowCount(y)
        for i in dict:
            self.resultsTable.setItem(x,0,QtWidgets.QTableWidgetItem(i))
            arrayAsString = np.array_str(dict[i])
            self.resultsTable.setItem(x, 1, QtWidgets.QTableWidgetItem(arrayAsString))
            x += 1

    # Creates the completer for results search bar
    def createGeneCompleter(self, dict):
        uidList = []
        x = 0
        for i in dict:
            uidList.insert(x,i)
            x += 1
    
        completer = QtWidgets.QCompleter(uidList)
        self.geneSearchBox.setCompleter(completer)

    # Starts thread to run timely preprocessing separate from the GUI operations
    def preProcessThread(self):
        t2 = Thread(target=self.preprocessButtonClicked)
        t2.start()

    # Preprocess seq and db files for quality check
    def preprocessButtonClicked(self):
        self.loadingLabel.setVisible(True)
        self.tempSeparatedFile = "matches.txt"
        open('matches.txt', 'w').close()
        try:
            self.total_input_reads = Procedure.separate_seqs(self.dbFile, self.seqFile, self.tempSeparatedFile, 18)
        except:
            traceback.print_exc()
        self.preprocessFilesButton.setVisible(False)
        self.preprocessCompleteLabel.setVisible(True)
        self.processButton.setVisible(True)
        self.loadingLabel.setVisible(False)

    # Starts thread for final processing 
    def processThread(self):
        self.uidAccessDict = Procedure.original_strings(self.dbFile)
        self.createGeneCompleter(self.uidAccessDict)
        t1 = Thread(target=self.processButtonClicked)
        t1.start()

    # Precesses and runs seq alignment and excel output generation
    def processButtonClicked(self):
        self.completionTimeLabel.setText("")
        self.completionTimeLabel.setVisible(False)
        self.tableLabel.setText(f"Derived ncRNAs: {self.exportedResultsSeq}")
        self.tableLabel.setVisible(True)
        self.loadingLabel.setVisible(True)
        self.results = {}

        startTime = time.perf_counter()
        try:
            self.results, self.normalized_meta = Procedure.seq_aligner(
    self.dbFile, self.tempSeparatedFile, 18
)
        except:
            traceback.print_exc()
        endTime = time.perf_counter()
        totalTime = endTime - startTime
        print(totalTime)
        mins = int(totalTime / 60)
        seconds = int(totalTime % 60)
        self.completionTimeLabel.setText(f"Completion Time: (minutes:seconds): {mins}:{seconds}")
        self.completionTimeLabel.setVisible(True)
        try:
            self.orig_strings = Procedure.original_strings(self.dbFile)
            get_peaks(
    self.results,
    self.orig_strings,
    self.exportedResultsSeq,
    self.exportedResultsDB,
    self.total_input_reads
            
)

            self._signals.done.emit(self.results)

        except:
            traceback.print_exc()
        os.remove("matches.txt")
        self.loadData(self.results)
        self.stackedWidget.setCurrentIndex(2)

        self.loadingLabel.setVisible(False)
        self.dbFile = ""
        self.seqFile = ""
        self.tempSeparatedFile = ""
        self.exportedResultsSeq = ""
        self.exportedResultsDB = ""

    # Open plot page and plot current selection from results table
    



    def plotButtonClicked(self):
        from scipy.stats import norm

        print(">> plotButtonClicked triggered")
        if not self.results:
            print(">> results dict is empty!")
            return

        self.sc = MplCanvas(self, width=5, height=4, dpi=100)
        self.sc.axes.cla()

        uid = self.geneSearchBox.text().strip()
        if not uid:
            sel_items = self.resultsTable.selectedItems()
            if sel_items:
                uid = sel_items[0].text()

        if not uid or uid not in self.results:
            print(">> No UID selected or UID not in results")
            return

        vec = np.asarray(self.results[uid], dtype=np.float64)
        sd = np.std(vec)
        peaks, _ = find_peaks(vec, prominence=sd * 0.85, distance=18)

        if isinstance(self.normalized_meta, dict):
            total_reads = self.normalized_meta.get("total_reads", 0)
        elif isinstance(self.normalized_meta, (int, float)):
            total_reads = self.normalized_meta
        else:
            total_reads = sum(map(np.sum, self.results.values()))
        if not total_reads:
            total_reads = 1.0

        self.uidLabel.setText(uid)

        for idx in peaks:
            peak_val = vec[idx]

            start = idx
            end = idx

            for i in range(idx + 1, len(vec)):
                if vec[i] == peak_val:
                    end = i
                else:
                    break
            for i in range(idx - 1, -1, -1):
                if vec[i] == peak_val:
                    start = i
                else:
                    break

            centered_idx = (start + end) // 2

            rpm = float(vec[centered_idx]) / total_reads * 1e6
            if rpm < 5.0:
                continue

            left, right = _val_check(vec, centered_idx, vec[centered_idx] - sd * 0.1)
            peak_end = min(right + 18, len(vec))

            vec[left:peak_end] = vec[centered_idx]

            self.sc.axes.plot(centered_idx, vec[centered_idx], "ko", label="Peak" if idx == peaks[0] else "")
            self.sc.axes.vlines([left, peak_end], 0, vec[centered_idx], color="g", linestyle="dashed")
            self.sc.axes.fill_betweenx([0, vec[centered_idx]], left, peak_end, color="g", alpha=0.2)

            # Calculate p-value based on baseline
            baseline = np.concatenate([vec[:max(0, left - 5)], vec[min(len(vec), peak_end + 5):]])
            if len(baseline) >= 2:
                baseline_mean = np.mean(baseline)
                baseline_std = np.std(baseline)
                if baseline_std > 0:
                    z = (vec[centered_idx] - baseline_mean) / baseline_std
                    p_val = norm.sf(z)
                    self.sc.axes.text(centered_idx, vec[centered_idx] + 0.05 * vec[centered_idx],
                                      f"p={p_val:.2e}", color="black", fontsize=8, ha="center")

        self.sc.axes.plot(vec, label="Expression")
        self.sc.axes.legend()

        self.sc.setParent(self.plotWidget)
        self.sc.show()

        for i in reversed(range(self.gridLayout.count())):
            widget_to_remove = self.gridLayout.itemAt(i).widget()
            self.gridLayout.removeWidget(widget_to_remove)
            widget_to_remove.setParent(None)

        self.gridLayout.addWidget(self.sc)
        self.plotWidget.update()
        self.gridLayoutWidget.update()
        print(">> Plotting done. Switching to plot page.")
        self.stackedWidget.setCurrentIndex(3)


    def exportAllPlots(self):
        import matplotlib.backends.backend_pdf
        from PyQt5 import QtCore
        from scipy.stats import norm

        pdf = matplotlib.backends.backend_pdf.PdfPages("ncRNA_Peak_Plots.pdf")

        if isinstance(self.normalized_meta, dict):
            total_reads = self.normalized_meta.get("total_reads", 0)
        elif isinstance(self.normalized_meta, (int, float)):
            total_reads = self.normalized_meta
        else:
            total_reads = sum(map(np.sum, self.results.values()))
        if not total_reads:
            total_reads = 1.0

        for uid in self.results:
            vec = np.asarray(self.results[uid], dtype=np.float64)
            sd = np.std(vec)
            peaks, _ = find_peaks(vec, prominence=sd * 0.85, distance=18)

            plot_vec = vec.copy()
            fig, ax = plt.subplots()
            ax.cla()

            for idx in peaks:
                peak_val = vec[idx]
                start = idx
                end = idx

                for i in range(idx + 1, len(vec)):
                    if vec[i] == peak_val:
                        end = i
                    else:
                        break
                for i in range(idx - 1, -1, -1):
                    if vec[i] == peak_val:
                        start = i
                    else:
                        break

                centered_idx = (start + end) // 2
                rpm = float(vec[centered_idx]) / total_reads * 1e6
                if rpm < 5.0:
                    continue

                left, right = _val_check(vec, centered_idx, vec[centered_idx] - sd * 0.1)
                peak_end = min(right + 18, len(vec))

                plot_vec[left:peak_end] = vec[centered_idx]

                ax.plot(centered_idx, vec[centered_idx], "ko")
                ax.vlines([left, peak_end], 0, vec[centered_idx], color="g", linestyle="dashed")
                ax.fill_betweenx([0, vec[centered_idx]], left, peak_end, color="g", alpha=0.2)

                # Annotate p-value
                baseline = np.concatenate([vec[:max(0, left - 5)], vec[min(len(vec), peak_end + 5):]])
                if len(baseline) >= 2:
                    baseline_mean = np.mean(baseline)
                    baseline_std = np.std(baseline)
                    if baseline_std > 0:
                        z = (vec[centered_idx] - baseline_mean) / baseline_std
                        p_val = norm.sf(z)
                        ax.text(centered_idx, vec[centered_idx] + 0.05 * vec[centered_idx],
                                f"p={p_val:.2e}", color="black", fontsize=8, ha="center")

            ax.plot(plot_vec, label="Expression")
            ax.set_title(uid)
            ax.legend()

            pdf.savefig(fig)
            plt.close(fig)
            QtCore.QCoreApplication.processEvents()

        pdf.close()
        print(">> All plots exported to ncRNA_Peak_Plots.pdf")


    # Remove previous widgets from layout
        for i in reversed(range(self.gridLayout.count())):
            widget_to_remove = self.gridLayout.itemAt(i).widget()
            self.gridLayout.removeWidget(widget_to_remove)
            widget_to_remove.setParent(None)

    # Add updated plot to layout
        self.gridLayout.addWidget(self.sc)
        self.plotWidget.update()
        self.gridLayoutWidget.update()
        print(">> Plotting done. Switching to plot page.")
        self.stackedWidget.setCurrentIndex(3)

    @QtCore.pyqtSlot(dict)
    def _onResultsReady(self, results):
        print(">> _onResultsReady triggered")
        self.results = results
        self.loadData(self.results)
        self.tableLabel.setText(f"Derived ncRNAs: {self.exportedResultsSeq}")
        self.tableLabel.setVisible(True)
        self.stackedWidget.setCurrentIndex(2)

    def exitPlotPageClicked(self):
        self.geneSearchBox.setText("")
        self.gridLayout.removeWidget(self.sc)
        self.uidLabel.setText("")
        self.stackedWidget.setCurrentIndex(2)


# ENTER THE GUI 
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_mainWindow()
    ui.setupUi(mainWindow)
    ui._signals = _WorkerSignals()
    print("Is slot callable?", callable(ui._onResultsReady))
    ui._signals.done.connect(ui._onResultsReady)
    print('>> Signals connected')
    mainWindow.show()
    app.aboutToQuit.connect(mainWindow.closeEvent)
    sys.exit(app.exec_())